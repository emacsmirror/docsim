#+title: =docsim.el=
#+options: toc:nil num:nil

[[https://melpa.org/#/docsim][https://melpa.org/packages/docsim-badge.svg]]
[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]]
[[https://github.com/hrs/docsim.el/actions/workflows/test.yml][https://github.com/hrs/docsim.el/actions/workflows/test.yml/badge.svg?branch=main]]

A fast, local search engine for your text files. Query your notes and get a
ranked list of the best matches.

* How is this different from =grep= (or =ripgrep=, or =ag=, or...)?

Those tools are all great, and I use them all the time! But they search for
literal text matches, usually line-by-line. That's often what I want, but
sometimes I want to know, "what notes are /most similar/ to this query, or to this
other note?"

If I search for "chunky bacon," I still want to see documents that talk about
"chunks of bacon." And, below those, I probably want to see notes that discuss
regular "bacon," even if it's not chunky.

=docsim= uses a few different [[https://github.com/hrs/docsim#how-it-works][information retrieval algorithms]] to provide a ranked
list of text documents. It takes term frequency into account, weighs rare words
more heavily, uses stoplists to ignore common terms, and (optionally) stems
English words (so "spinning" can match "spinner").

It's also slower and more memory-intensive than those other tools, of course,
since it does more work. But performance /is/ a goal, and on a mid-range machine
it'll process a few thousand documents without notable lag.

* Installation

=docsim.el= relies on the [[https://github.com/hrs/docsim][docsim command-line tool]] to do most of the work, so
you'll need to install that on your =$PATH= first. It's a small Go utility with
[[https://github.com/hrs/docsim/releases/latest][precompiled binaries]] available for most popular platforms, or you can [[https://github.com/hrs/docsim#installation][install it
from source]].

Once that's done, just install =docsim.el= from [[https://melpa.org/#/docsim][MELPA]] like any other package. With
~use-package~:

#+begin_src emacs-lisp
  (use-package docsim
    :ensure t
    :bind (("C-c n s" . docsim-search)
           ("C-c n d" . docsim-search-buffer))

    :custom
    (docsim-search-paths '("~/directory/where/you/keep/your/notes")))
#+end_src

Or, if you'd rather install manually, add =docsim.el= to your load path and:

#+begin_src emacs-lisp
  (require 'docsim)
  (setq docsim-search-paths '("~/directory/where/you/keep/your/notes"))
  (global-set-key (kbd "C-c n s") 'docsim-search)
  (global-set-key (kbd "C-c n d") 'docsim-search-buffer)
#+end_src

Those keybindings are just made up, of course. Use whatever you'd like!

* Usage

Once you've got =docsim.el= installed and configured, you'll probably just use:

- ~docsim-search~ :: Search your notes for a query.
- ~docsim-search-buffer~ :: Parse the current buffer and list similar notes.

If you link your notes together into a [[https://en.wikipedia.org/wiki/Zettelkasten][zettelkasten]] (maybe you use =org-roam= or
=denote=?), ~docsim-search-buffer~ can help you surface similar notes that "should"
be linked together. That can help you find connections you'd otherwise miss and
makes it easier to add notes into your personal knowledge graph.

In particular, the maintainer of this package :wave: happens to use =denote= to
manage their notes, so =docsim.el= includes an option to exclude notes that you've
already linked from your search results. Configure that like so:

#+begin_src emacs-lisp
  (setq docsim-search-paths (list denote-directory))
  (setq docsim-omit-denote-links t)
#+end_src

* But I don't write in English!

Because its author is a monoglot (and because it was easy for them to find a
good Go stemming library for English) =docsim= defaults to using English stoplists
and stemming to improve accuracy. If you mostly write in a language /other/ than
English you might need to tweak things a bit to get comparable results.

First, disable those English-specific features:

#+begin_src emacs-lisp
  (setq docsim-assume-english nil)
#+end_src

Next, optionally, provide a custom stoplist of common words in your language.
This is a text file of words that don't carry much semantic meaning (like "as"
or "because" in English) separated by newlines. Words like this would probably
already be /mostly/ ignored by =docsim=, because words are weighted by how rarely
they show up, but if you add a stoplist they'll be skipped completely.

#+begin_src emacs-lisp
  (setq docsim-stoplist-file "~/path/to/my/custom/stoplist.txt")
#+end_src

There's no universal authority on what constitutes "a good stoplist," but here's
a [[https://code.google.com/archive/p/stop-words/][repo of stoplists for 29 languages]] that might be helpful!
